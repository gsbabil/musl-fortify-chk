diff --git a/src/fortify/asprintf_chk.c b/src/fortify/asprintf_chk.c
new file mode 100644
index 00000000..37807570
--- /dev/null
+++ b/src/fortify/asprintf_chk.c
@@ -0,0 +1,13 @@
+#define _GNU_SOURCE
+#include <stdio.h>
+#include <stdarg.h>
+
+int __asprintf_chk(char **s, int flag, const char *fmt, ...)
+{
+	int ret;
+	va_list ap;
+	va_start(ap, fmt);
+	ret = vasprintf(s, fmt, ap);
+	va_end(ap);
+	return ret;
+}
diff --git a/src/fortify/chk_fail.c b/src/fortify/chk_fail.c
new file mode 100644
index 00000000..46615e2b
--- /dev/null
+++ b/src/fortify/chk_fail.c
@@ -0,0 +1,9 @@
+#include "atomic.h"
+#include "fortify.h"
+
+_Noreturn void __chk_fail(void)
+{
+	a_crash();
+	// make gcc happy
+	abort();
+}
diff --git a/src/fortify/confstr_chk.c b/src/fortify/confstr_chk.c
new file mode 100644
index 00000000..327e1851
--- /dev/null
+++ b/src/fortify/confstr_chk.c
@@ -0,0 +1,8 @@
+#include <unistd.h>
+#include "fortify.h"
+
+size_t __confstr_chk(int name, char *buf, size_t len, size_t buflen)
+{
+	if(buflen < len) __chk_fail();
+	return confstr(name, buf, len);
+}
diff --git a/src/fortify/fdelt_chk.c b/src/fortify/fdelt_chk.c
new file mode 100644
index 00000000..2efcea3c
--- /dev/null
+++ b/src/fortify/fdelt_chk.c
@@ -0,0 +1,9 @@
+#define _GNU_SOURCE
+#include <sys/select.h>
+#include "fortify.h"
+
+long __fdelt_chk(long d)
+{
+	if(0 < d || d >= FD_SETSIZE) __chk_fail();
+	return d/NFDBITS;
+}
diff --git a/src/fortify/fgets_chk.c b/src/fortify/fgets_chk.c
new file mode 100644
index 00000000..f4abd2d0
--- /dev/null
+++ b/src/fortify/fgets_chk.c
@@ -0,0 +1,10 @@
+#include <stdio.h>
+#include "fortify.h"
+
+char *__fgets_chk(char *restrict s, size_t size, int strsize, FILE *restrict f)
+{
+	if(strsize < size) __chk_fail();
+	return fgets(s, size, f);
+}
+
+weak_alias(__fgets_chk, __fgets_unlocked_chk);
diff --git a/src/fortify/fgetws_chk.c b/src/fortify/fgetws_chk.c
new file mode 100644
index 00000000..80dea5e6
--- /dev/null
+++ b/src/fortify/fgetws_chk.c
@@ -0,0 +1,10 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__fgetws_chk(wchar_t *restrict s, size_t size, int strsize, FILE *restrict f)
+{
+	if(strsize < size) __chk_fail();
+	return fgetws(s, size, f);
+}
+
+weak_alias(__fgetws_chk, __fgetws_unlocked_chk);
diff --git a/src/fortify/fprintf_chk.c b/src/fortify/fprintf_chk.c
new file mode 100644
index 00000000..30f26cc9
--- /dev/null
+++ b/src/fortify/fprintf_chk.c
@@ -0,0 +1,14 @@
+#include <stdio.h>
+#include <stdarg.h>
+#include "fortify.h"
+
+int __fprintf_chk(FILE *restrict f, int flag, const char *restrict fmt, ...)
+{
+	//FIXME: fortify
+	int ret;
+	va_list ap;
+	va_start(ap, fmt);
+	ret = vfprintf(f, fmt, ap);
+	va_end(ap);
+	return ret;
+}
diff --git a/src/fortify/fwprintf_chk.c b/src/fortify/fwprintf_chk.c
new file mode 100644
index 00000000..bcc513db
--- /dev/null
+++ b/src/fortify/fwprintf_chk.c
@@ -0,0 +1,14 @@
+#include <wchar.h>
+#include <stdarg.h>
+#include "fortify.h"
+
+int __fwprintf_chk(FILE *restrict f, int flag, const wchar_t *restrict fmt, ...)
+{
+	//FIXME: fortify
+	int ret;
+	va_list ap;
+	va_start(ap, fmt);
+	ret = vfwprintf(f, fmt, ap);
+	va_end(ap);
+	return ret;
+}
diff --git a/src/fortify/getcwd_chk.c b/src/fortify/getcwd_chk.c
new file mode 100644
index 00000000..2c9063e6
--- /dev/null
+++ b/src/fortify/getcwd_chk.c
@@ -0,0 +1,8 @@
+#include <unistd.h>
+#include "fortify.h"
+
+char *__getcwd_chk(char *buf, size_t len, size_t buflen)
+{
+	if(buflen < len) __chk_fail();
+	return getcwd(buf, len);
+}
diff --git a/src/fortify/getgroups_chk.c b/src/fortify/getgroups_chk.c
new file mode 100644
index 00000000..07313a05
--- /dev/null
+++ b/src/fortify/getgroups_chk.c
@@ -0,0 +1,8 @@
+#include <unistd.h>
+#include "fortify.h"
+
+int __getgroups_chk(int count, gid_t *list, size_t listlen)
+{
+	if(count*sizeof(gid_t) > listlen) __chk_fail();
+	return getgroups(count, list);
+}
diff --git a/src/fortify/gethostname_chk.c b/src/fortify/gethostname_chk.c
new file mode 100644
index 00000000..86f07a45
--- /dev/null
+++ b/src/fortify/gethostname_chk.c
@@ -0,0 +1,8 @@
+#include <unistd.h>
+#include "fortify.h"
+
+int __gethostname_chk(char *name, size_t len, size_t maxlen)
+{
+	if(len > maxlen) __chk_fail();
+	return gethostname(name, len);
+}
diff --git a/src/fortify/getlogin_r_chk.c b/src/fortify/getlogin_r_chk.c
new file mode 100644
index 00000000..46c207b1
--- /dev/null
+++ b/src/fortify/getlogin_r_chk.c
@@ -0,0 +1,8 @@
+#include <unistd.h>
+#include "fortify.h"
+
+int __getlogin_r_chk(char *name, size_t size, size_t maxlen)
+{
+	if(size < maxlen) __chk_fail();
+	return getlogin_r(name, size);
+}
diff --git a/src/fortify/longjmp_chk.c b/src/fortify/longjmp_chk.c
new file mode 100644
index 00000000..0f5a242e
--- /dev/null
+++ b/src/fortify/longjmp_chk.c
@@ -0,0 +1,6 @@
+#include <setjmp.h>
+
+void __longjmp_chk(jmp_buf env, int val)
+{
+	return longjmp(env, val);
+}
diff --git a/src/fortify/mbsnrtowcs_chk.c b/src/fortify/mbsnrtowcs_chk.c
new file mode 100644
index 00000000..c48375ed
--- /dev/null
+++ b/src/fortify/mbsnrtowcs_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+size_t __mbsnrtowcs_chk(wchar_t *restrict wcs, const char **restrict src, size_t n, size_t wn, mbstate_t *restrict st, size_t dn)
+{
+	if(dn < wn) __chk_fail();
+	return mbsnrtowcs(wcs, src, n, wn, st);
+}
diff --git a/src/fortify/mbsrtowcs_chk.c b/src/fortify/mbsrtowcs_chk.c
new file mode 100644
index 00000000..817c0032
--- /dev/null
+++ b/src/fortify/mbsrtowcs_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+size_t __mbsrtowcs_chk(wchar_t *restrict ws, const char **restrict src, size_t wn, mbstate_t *restrict st, size_t dn)
+{
+	if(dn < wn) __chk_fail();
+	return mbsrtowcs(ws, src, wn, st);
+}
diff --git a/src/fortify/mbstowcs_chk.c b/src/fortify/mbstowcs_chk.c
new file mode 100644
index 00000000..2f3b0e7d
--- /dev/null
+++ b/src/fortify/mbstowcs_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+size_t __mbstowcs_chk(wchar_t *restrict ws, const char *restrict s, size_t wn, size_t dn)
+{
+	if(dn < wn) __chk_fail();
+	return mbstowcs(ws, s, wn);
+}
diff --git a/src/fortify/memcpy_chk.c b/src/fortify/memcpy_chk.c
new file mode 100644
index 00000000..baa74e78
--- /dev/null
+++ b/src/fortify/memcpy_chk.c
@@ -0,0 +1,8 @@
+#include <string.h>
+#include "fortify.h"
+
+void *__memcpy_chk(void *restrict dest, const void *restrict src, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return memcpy(dest, src, n);
+}
diff --git a/src/fortify/memmove_chk.c b/src/fortify/memmove_chk.c
new file mode 100644
index 00000000..a20e6f41
--- /dev/null
+++ b/src/fortify/memmove_chk.c
@@ -0,0 +1,8 @@
+#include <string.h>
+#include "fortify.h"
+
+void *__memmove_chk(void *dest, const void *src, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return memmove(dest, src, n);
+}
diff --git a/src/fortify/mempcpy_chk.c b/src/fortify/mempcpy_chk.c
new file mode 100644
index 00000000..6290fa96
--- /dev/null
+++ b/src/fortify/mempcpy_chk.c
@@ -0,0 +1,9 @@
+#define _GNU_SOURCE
+#include <string.h>
+#include "fortify.h"
+
+void *__mempcpy_chk(void *dest, const void *src, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return mempcpy(dest, src, n);
+}
diff --git a/src/fortify/memset_chk.c b/src/fortify/memset_chk.c
new file mode 100644
index 00000000..18a10b38
--- /dev/null
+++ b/src/fortify/memset_chk.c
@@ -0,0 +1,8 @@
+#include <string.h>
+#include "fortify.h"
+
+void *__memset_chk(void *dest, int c, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return memset(dest, c, n);
+}
diff --git a/src/fortify/pread_chk.c b/src/fortify/pread_chk.c
new file mode 100644
index 00000000..7d426120
--- /dev/null
+++ b/src/fortify/pread_chk.c
@@ -0,0 +1,10 @@
+#include <unistd.h>
+#include "fortify.h"
+
+ssize_t __pread_chk(int fd, void *buf, size_t size, off_t ofs, size_t bufsize)
+{
+	if(bufsize < size) __chk_fail();
+	return pread(fd, buf, size, ofs);
+}
+
+ssize_t LFS64_2(__pread_chk, __pread64_chk);
diff --git a/src/fortify/printf_chk.c b/src/fortify/printf_chk.c
new file mode 100644
index 00000000..2f1e7e48
--- /dev/null
+++ b/src/fortify/printf_chk.c
@@ -0,0 +1,14 @@
+#include <stdio.h>
+#include <stdarg.h>
+#include "fortify.h"
+
+int __printf_chk(int flag, const char *restrict fmt, ...)
+{
+	//FIXME: fortify
+	int ret;
+	va_list ap;
+	va_start(ap, fmt);
+	ret = vfprintf(stdout, fmt, ap);
+	va_end(ap);
+	return ret;
+}
diff --git a/src/fortify/read_chk.c b/src/fortify/read_chk.c
new file mode 100644
index 00000000..1e72d8ed
--- /dev/null
+++ b/src/fortify/read_chk.c
@@ -0,0 +1,8 @@
+#include <unistd.h>
+#include "fortify.h"
+
+ssize_t __read_chk(int fd, void *buf, size_t count, size_t buflen)
+{
+	if(buflen < count) __chk_fail();
+	return read(fd, buf, count);
+}
diff --git a/src/fortify/readlink_chk.c b/src/fortify/readlink_chk.c
new file mode 100644
index 00000000..38e8a4a2
--- /dev/null
+++ b/src/fortify/readlink_chk.c
@@ -0,0 +1,8 @@
+#include <unistd.h>
+#include "fortify.h"
+
+ssize_t __readlink_chk(const char *restrict path, char *restrict buf, size_t size, size_t bufsize)
+{
+	if(bufsize < size) __chk_fail();
+	return readlink(path, buf, size);
+}
diff --git a/src/fortify/realpath_chk.c b/src/fortify/realpath_chk.c
new file mode 100644
index 00000000..e949a359
--- /dev/null
+++ b/src/fortify/realpath_chk.c
@@ -0,0 +1,9 @@
+#include <stdlib.h>
+#include <limits.h>
+#include "fortify.h"
+
+char *__realpath_chk(const char *restrict filename, char *restrict resolved, size_t resolved_len)
+{
+	if(resolved_len < PATH_MAX) __chk_fail();
+	return realpath(filename, resolved);
+}
diff --git a/src/fortify/recv_chk.c b/src/fortify/recv_chk.c
new file mode 100644
index 00000000..636f1c04
--- /dev/null
+++ b/src/fortify/recv_chk.c
@@ -0,0 +1,9 @@
+#include <sys/socket.h>
+#include "fortify.h"
+
+ssize_t __recv_chk(int fd, void *buf, size_t len, size_t buflen, int flags)
+{
+	if(buflen < len) __chk_fail();
+	return recv(fd, buf, len, flags);
+}
+
diff --git a/src/fortify/recvfrom_chk.c b/src/fortify/recvfrom_chk.c
new file mode 100644
index 00000000..20c9003f
--- /dev/null
+++ b/src/fortify/recvfrom_chk.c
@@ -0,0 +1,8 @@
+#include <sys/socket.h>
+#include "fortify.h"
+
+ssize_t __recvfrom_chk(int fd, void *restrict buf, size_t len, size_t buflen, int flags, struct sockaddr *restrict addr, socklen_t *restrict alen)
+{
+	if(buflen < len) __chk_fail();
+	return recvfrom(fd, buf, len, flags, addr, alen);
+}
diff --git a/src/fortify/snprintf_chk.c b/src/fortify/snprintf_chk.c
new file mode 100644
index 00000000..e20d1846
--- /dev/null
+++ b/src/fortify/snprintf_chk.c
@@ -0,0 +1,14 @@
+#include <stdio.h>
+#include <stdarg.h>
+#include "fortify.h"
+
+int __snprintf_chk(char *restrict s, size_t n, int flag, size_t sn, const char *restrict fmt, ...)
+{
+	if(sn < n) __chk_fail();
+	int ret;
+	va_list ap;
+	va_start(ap, fmt);
+	ret = vsnprintf(s, n, fmt, ap);
+	va_end(ap);
+	return ret;
+}
diff --git a/src/fortify/sprintf_chk.c b/src/fortify/sprintf_chk.c
new file mode 100644
index 00000000..4a1f0016
--- /dev/null
+++ b/src/fortify/sprintf_chk.c
@@ -0,0 +1,14 @@
+#include <stdio.h>
+#include <stdarg.h>
+#include "fortify.h"
+
+int __sprintf_chk(char *restrict s, int flag, size_t sn, const char *restrict fmt, ...)
+{
+	if(sn == 0) __chk_fail();
+	int ret;
+	va_list ap;
+	va_start(ap, fmt);
+	ret = vsprintf(s, fmt, ap);
+	va_end(ap);
+	return ret;
+}
diff --git a/src/fortify/stpcpy_chk.c b/src/fortify/stpcpy_chk.c
new file mode 100644
index 00000000..d5a5748b
--- /dev/null
+++ b/src/fortify/stpcpy_chk.c
@@ -0,0 +1,8 @@
+#include <string.h>
+#include "fortify.h"
+
+char *__stpcpy_chk(char *restrict d, const char *restrict s, size_t dn)
+{
+	if(dn <= strlen(s)) __chk_fail();
+	return stpcpy(d, s);
+}
diff --git a/src/fortify/stpncpy_chk.c b/src/fortify/stpncpy_chk.c
new file mode 100644
index 00000000..346a55a4
--- /dev/null
+++ b/src/fortify/stpncpy_chk.c
@@ -0,0 +1,8 @@
+#include <string.h>
+#include "fortify.h"
+
+char *__stpncpy_chk(char *restrict d, const char *restrict s, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return stpncpy(d, s, n);
+}
diff --git a/src/fortify/strcat_chk.c b/src/fortify/strcat_chk.c
new file mode 100644
index 00000000..99dc545f
--- /dev/null
+++ b/src/fortify/strcat_chk.c
@@ -0,0 +1,7 @@
+#include <string.h>
+#include "fortify.h"
+
+char *__strcat_chk(char *restrict dest, const char *restrict src, size_t destlen)
+{
+	return strcat(dest, src);
+}
diff --git a/src/fortify/strcpy_chk.c b/src/fortify/strcpy_chk.c
new file mode 100644
index 00000000..70be76b0
--- /dev/null
+++ b/src/fortify/strcpy_chk.c
@@ -0,0 +1,8 @@
+#include <string.h>
+#include "fortify.h"
+
+char *__strcpy_chk(char *restrict dest, const char *restrict src, size_t destlen)
+{
+	if(destlen <= strlen(src)) __chk_fail();
+	return strcpy(dest, src);
+}
diff --git a/src/fortify/strncat_chk.c b/src/fortify/strncat_chk.c
new file mode 100644
index 00000000..54217500
--- /dev/null
+++ b/src/fortify/strncat_chk.c
@@ -0,0 +1,8 @@
+#include <string.h>
+#include "fortify.h"
+
+char *__strncat_chk(char *restrict d, const char *restrict s, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return strncat(d, s, n);
+}
diff --git a/src/fortify/strncpy_chk.c b/src/fortify/strncpy_chk.c
new file mode 100644
index 00000000..d7df0391
--- /dev/null
+++ b/src/fortify/strncpy_chk.c
@@ -0,0 +1,8 @@
+#include <string.h>
+#include "fortify.h"
+
+char *__strncpy_chk(char *restrict d, const char *restrict s, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return strncpy(d, s, n);
+}
diff --git a/src/fortify/swprintf_chk.c b/src/fortify/swprintf_chk.c
new file mode 100644
index 00000000..2587a693
--- /dev/null
+++ b/src/fortify/swprintf_chk.c
@@ -0,0 +1,14 @@
+#include <stdarg.h>
+#include <wchar.h>
+#include "fortify.h"
+
+int __swprintf_chk(wchar_t *restrict s, size_t n, int flag, size_t sn, const wchar_t *restrict fmt, ...)
+{
+	if(sn < n) __chk_fail();
+	int ret;
+	va_list ap;
+	va_start(ap, fmt);
+	ret = vswprintf(s, n, fmt, ap);
+	va_end(ap);
+	return ret;
+}
diff --git a/src/fortify/syslog_chk.c b/src/fortify/syslog_chk.c
new file mode 100644
index 00000000..f59578fa
--- /dev/null
+++ b/src/fortify/syslog_chk.c
@@ -0,0 +1,13 @@
+#include <stdarg.h>
+#include <syslog.h>
+#include "fortify.h"
+
+void __vsyslog(int, const char *, va_list);
+
+void __syslog_chk(int priority, int flag, const char *message, ...)
+{
+	va_list ap;
+	va_start(ap, message);
+	__vsyslog(priority, message, ap);
+	va_end(ap);
+}
diff --git a/src/fortify/ttyname_r_chk.c b/src/fortify/ttyname_r_chk.c
new file mode 100644
index 00000000..980ef529
--- /dev/null
+++ b/src/fortify/ttyname_r_chk.c
@@ -0,0 +1,8 @@
+#include <unistd.h>
+#include "fortify.h"
+
+int __ttyname_r_chk(int fd, char *name, size_t size, size_t nsize)
+{
+	if(nsize < size) __chk_fail();
+	return ttyname_r(fd, name, size);
+}
diff --git a/src/fortify/vasprintf_chk.c b/src/fortify/vasprintf_chk.c
new file mode 100644
index 00000000..6651e528
--- /dev/null
+++ b/src/fortify/vasprintf_chk.c
@@ -0,0 +1,8 @@
+#define _GNU_SOURCE
+#include <stdio.h>
+#include <stdarg.h>
+
+int __vasprintf_chk(char **s, int flag, const char *fmt, va_list ap)
+{
+	return vasprintf(s, fmt, ap);
+}
diff --git a/src/fortify/vfprintf_chk.c b/src/fortify/vfprintf_chk.c
new file mode 100644
index 00000000..d9a9d252
--- /dev/null
+++ b/src/fortify/vfprintf_chk.c
@@ -0,0 +1,8 @@
+#include <stdio.h>
+#include <stdarg.h>
+#include "fortify.h"
+
+int __vfprintf_chk(FILE *restrict f, int flag, const char *restrict fmt, va_list ap)
+{
+	return vfprintf(f, fmt, ap);
+}
diff --git a/src/fortify/vfwprintf_chk.c b/src/fortify/vfwprintf_chk.c
new file mode 100644
index 00000000..1eda570d
--- /dev/null
+++ b/src/fortify/vfwprintf_chk.c
@@ -0,0 +1,8 @@
+#include <stdarg.h>
+#include <wchar.h>
+#include "fortify.h"
+
+int __vfwprintf_chk(FILE *restrict f, int flag, const wchar_t *restrict fmt, va_list ap)
+{
+	return vfwprintf(f, fmt, ap);
+}
diff --git a/src/fortify/vprintf_chk.c b/src/fortify/vprintf_chk.c
new file mode 100644
index 00000000..b6f66e2d
--- /dev/null
+++ b/src/fortify/vprintf_chk.c
@@ -0,0 +1,7 @@
+#include <stdio.h>
+#include <stdarg.h>
+#include "fortify.h"
+
+int __vprintf_chk(int flag, const char *restrict fmt, va_list ap) {
+	return vprintf(fmt, ap);
+}
diff --git a/src/fortify/vsnprintf_chk.c b/src/fortify/vsnprintf_chk.c
new file mode 100644
index 00000000..4608a69b
--- /dev/null
+++ b/src/fortify/vsnprintf_chk.c
@@ -0,0 +1,9 @@
+#include <stdio.h>
+#include <stdarg.h>
+#include "fortify.h"
+
+int __vsnprintf_chk(char *restrict s, size_t n, int flag, size_t sn, const char *restrict fmt, va_list ap)
+{
+	if(sn < n) __chk_fail();
+	return vsnprintf(s, n, fmt, ap);
+}
diff --git a/src/fortify/vsprintf_chk.c b/src/fortify/vsprintf_chk.c
new file mode 100644
index 00000000..306a5199
--- /dev/null
+++ b/src/fortify/vsprintf_chk.c
@@ -0,0 +1,7 @@
+#include <stdio.h>
+#include <stdarg.h>
+#include "fortify.h"
+
+int __vsprintf_chk(char *restrict s, int flag, size_t sn, const char *restrict fmt, va_list ap) {
+  return vsprintf(s, fmt, ap);
+}
diff --git a/src/fortify/vswprintf_chk.c b/src/fortify/vswprintf_chk.c
new file mode 100644
index 00000000..b79ad68c
--- /dev/null
+++ b/src/fortify/vswprintf_chk.c
@@ -0,0 +1,9 @@
+#include <stdarg.h>
+#include <wchar.h>
+#include "fortify.h"
+
+int __vswprintf_chk(wchar_t *restrict s, size_t n, int flag, size_t sn, const wchar_t *restrict fmt, va_list ap)
+{
+	if(sn < n) __chk_fail();
+	return vswprintf(s, n, fmt, ap);
+}
diff --git a/src/fortify/vsyslog_chk.c b/src/fortify/vsyslog_chk.c
new file mode 100644
index 00000000..998391fa
--- /dev/null
+++ b/src/fortify/vsyslog_chk.c
@@ -0,0 +1,10 @@
+#include <stdarg.h>
+#include <syslog.h>
+#include "fortify.h"
+
+void __vsyslog(int, const char *, va_list);
+
+void __vsyslog_chk(int priority, int flag, const char *message, va_list ap)
+{
+	return __vsyslog(priority, message, ap);
+}
diff --git a/src/fortify/vwprintf_chk.c b/src/fortify/vwprintf_chk.c
new file mode 100644
index 00000000..627fa848
--- /dev/null
+++ b/src/fortify/vwprintf_chk.c
@@ -0,0 +1,8 @@
+#include <stdarg.h>
+#include <wchar.h>
+#include "fortify.h"
+
+int __vwprintf_chk(int flag, const wchar_t *restrict fmt, va_list ap)
+{
+	return vwprintf(fmt, ap);
+}
diff --git a/src/fortify/wcpcpy_chk.c b/src/fortify/wcpcpy_chk.c
new file mode 100644
index 00000000..f57e6d73
--- /dev/null
+++ b/src/fortify/wcpcpy_chk.c
@@ -0,0 +1,7 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__wcpcpy_chk(wchar_t *restrict d, const wchar_t *restrict s, size_t dn)
+{
+  return wcpcpy(d, s);
+}
diff --git a/src/fortify/wcpncpy_chk.c b/src/fortify/wcpncpy_chk.c
new file mode 100644
index 00000000..94901e9f
--- /dev/null
+++ b/src/fortify/wcpncpy_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__wcpncpy_chk(wchar_t *restrict d, const wchar_t *restrict s, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return wcpncpy(d, s, n);
+}
diff --git a/src/fortify/wcrtomb_chk.c b/src/fortify/wcrtomb_chk.c
new file mode 100644
index 00000000..b5b78c87
--- /dev/null
+++ b/src/fortify/wcrtomb_chk.c
@@ -0,0 +1,9 @@
+#include <wchar.h>
+#include "locale_impl.h"
+#include "fortify.h"
+
+size_t __wcrtomb_chk(char *restrict s, wchar_t wc, mbstate_t *restrict st, size_t bn)
+{
+	if(bn < MB_CUR_MAX) __chk_fail();
+	return wcrtomb(s, wc, st);
+}
diff --git a/src/fortify/wcscat_chk.c b/src/fortify/wcscat_chk.c
new file mode 100644
index 00000000..d0ff3c51
--- /dev/null
+++ b/src/fortify/wcscat_chk.c
@@ -0,0 +1,6 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__wcscat_chk(wchar_t *restrict dest, const wchar_t *restrict src, size_t destlen) {
+	return wcscat(dest, src);
+}
diff --git a/src/fortify/wcscpy_chk.c b/src/fortify/wcscpy_chk.c
new file mode 100644
index 00000000..eb1c4904
--- /dev/null
+++ b/src/fortify/wcscpy_chk.c
@@ -0,0 +1,7 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__wcscpy_chk(wchar_t *restrict d, const wchar_t *restrict s, size_t dn)
+{
+  return wcscpy(d, s);
+}
diff --git a/src/fortify/wcsncat_chk.c b/src/fortify/wcsncat_chk.c
new file mode 100644
index 00000000..01c6919f
--- /dev/null
+++ b/src/fortify/wcsncat_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__wcsncat_chk(wchar_t *restrict d, const wchar_t *restrict s, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return wcsncat(d, s, n);
+}
diff --git a/src/fortify/wcsncpy_chk.c b/src/fortify/wcsncpy_chk.c
new file mode 100644
index 00000000..508c945a
--- /dev/null
+++ b/src/fortify/wcsncpy_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__wcsncpy_chk(wchar_t *restrict d, const wchar_t *restrict s, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return wcsncpy(d, s, n);
+}
diff --git a/src/fortify/wcsnrtombs_chk.c b/src/fortify/wcsnrtombs_chk.c
new file mode 100644
index 00000000..5769c944
--- /dev/null
+++ b/src/fortify/wcsnrtombs_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+size_t __wcsnrtombs_chk(char *restrict dst, const wchar_t **restrict wcs, size_t wn, size_t n, mbstate_t *restrict st, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return wcsnrtombs(dst, wcs, wn, n, st);
+}
diff --git a/src/fortify/wcsrtombs_chk.c b/src/fortify/wcsrtombs_chk.c
new file mode 100644
index 00000000..fec3826d
--- /dev/null
+++ b/src/fortify/wcsrtombs_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+size_t __wcsrtombs_chk(char *restrict s, const wchar_t **restrict ws, size_t n, mbstate_t *restrict st, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return wcsrtombs(s, ws, n, st);
+}
diff --git a/src/fortify/wcstombs_chk.c b/src/fortify/wcstombs_chk.c
new file mode 100644
index 00000000..9220d820
--- /dev/null
+++ b/src/fortify/wcstombs_chk.c
@@ -0,0 +1,8 @@
+#include <stdlib.h>
+#include "fortify.h"
+
+size_t __wcstombs_chk(char *restrict s, const wchar_t *restrict ws, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return wcstombs(s, ws, n);
+}
diff --git a/src/fortify/wctomb_chk.c b/src/fortify/wctomb_chk.c
new file mode 100644
index 00000000..0f4964fa
--- /dev/null
+++ b/src/fortify/wctomb_chk.c
@@ -0,0 +1,9 @@
+#include <stdlib.h>
+#include "locale_impl.h"
+#include "fortify.h"
+
+int __wctomb_chk(char *s, wchar_t wc, size_t sn)
+{
+	if(sn < MB_CUR_MAX) __chk_fail();
+	return wctomb(s, wc);
+}
diff --git a/src/fortify/wmemcpy_chk.c b/src/fortify/wmemcpy_chk.c
new file mode 100644
index 00000000..c61f11e0
--- /dev/null
+++ b/src/fortify/wmemcpy_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__wmemcpy_chk(wchar_t *restrict d, const wchar_t *restrict s, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return wmemcpy(d, s, n);
+}
diff --git a/src/fortify/wmemmove_chk.c b/src/fortify/wmemmove_chk.c
new file mode 100644
index 00000000..950d6861
--- /dev/null
+++ b/src/fortify/wmemmove_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__wmemmove_chk(wchar_t *d, const wchar_t *s, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return wmemmove(d, s, n);
+}
diff --git a/src/fortify/wmemset_chk.c b/src/fortify/wmemset_chk.c
new file mode 100644
index 00000000..4c2479c1
--- /dev/null
+++ b/src/fortify/wmemset_chk.c
@@ -0,0 +1,8 @@
+#include <wchar.h>
+#include "fortify.h"
+
+wchar_t *__wmemset_chk(wchar_t *d, wchar_t c, size_t n, size_t dn)
+{
+	if(dn < n) __chk_fail();
+	return wmemset(d, c, n);
+}
diff --git a/src/fortify/wprintf_chk.c b/src/fortify/wprintf_chk.c
new file mode 100644
index 00000000..8e5f4b56
--- /dev/null
+++ b/src/fortify/wprintf_chk.c
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include <stdarg.h>
+#include <wchar.h>
+
+int __wprintf_chk(int flag, const wchar_t *restrict fmt, ...)
+{
+	int ret;
+	va_list ap;
+	va_start(ap, fmt);
+	ret = vwprintf(fmt, ap);
+	va_end(ap);
+	return ret;
+}
diff --git a/src/internal/fortify.h b/src/internal/fortify.h
new file mode 100644
index 00000000..9d3798e2
--- /dev/null
+++ b/src/internal/fortify.h
@@ -0,0 +1,5 @@
+#include "libc.h"
+
+_Noreturn void __chk_fail(void);
+
+void __vsyslog(int, const char *, va_list);
diff --git a/src/misc/syslog.c b/src/misc/syslog.c
index 13d4b0a6..5ea3481c 100644
--- a/src/misc/syslog.c
+++ b/src/misc/syslog.c
@@ -122,7 +122,7 @@ static void _vsyslog(int priority, const char *message, va_list ap)
 	}
 }
 
-static void __vsyslog(int priority, const char *message, va_list ap)
+void __vsyslog(int priority, const char *message, va_list ap)
 {
 	int cs;
 	if (!(log_mask & LOG_MASK(priority&7)) || (priority&~0x3ff)) return;
